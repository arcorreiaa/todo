{"version":3,"sources":["App.styles.ts","components/ListItem/styles.ts","components/ListItem/index.tsx","components/AddArea/styles.ts","components/AddArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Area","Header","h1","done","ListItem","item","useState","isChecked","setIsChecked","type","checked","onChange","e","target","name","AddArea","onEnter","inputText","setInputText","className","placeholder","value","onKeyUp","code","App","list","setList","taskName","newList","push","id","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAEaA,EAAYC,IAAOC,IAAV,yGAMTC,EAAOF,IAAOC,IAAV,0FAMJE,EAASH,IAAOI,GAAV,uKCRNL,EAAYC,IAAOC,KAAI,gBAAGI,EAAH,EAAGA,KAAH,qUAiBTA,EAAO,eAAiB,UAjBf,iB,OCEvBC,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KACvB,EAAkCC,mBAASD,EAAKF,MAAhD,mBAAOI,EAAP,KAAkBC,EAAlB,KAEA,OACI,eAAC,EAAD,CAAaL,KAAMI,EAAnB,UACI,uBACAE,KAAK,WACLC,QAASH,EACTI,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,OAAOH,YAErC,gCAAQL,EAAKS,WChBZjB,EAAYC,IAAOC,IAAV,gYCKTgB,EAAU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QACtB,EAAkCV,mBAAS,IAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KASA,OACI,eAAC,EAAD,WACI,qBAAKC,UAAU,QAAf,oBACA,uBAAOV,KAAK,OACZW,YAAY,sBACZC,MAAOJ,EACPN,SAAU,SAAAC,GAAC,OAAEM,EAAaN,EAAEC,OAAOQ,QACnCC,QAdY,SAACV,GACH,UAAXA,EAAEW,MAAmC,KAAfN,IACrBD,EAAQC,GACRC,EAAa,YCkCVM,EAxCH,WACV,MAAwBlB,mBAAiB,IAAzC,mBAAOmB,EAAP,KAAaC,EAAb,KAqBA,OACE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,+BAEA,cAAC,EAAD,CAASV,QAfO,SAACW,GACrB,IAAIC,EAAO,YAAOH,GAClBG,EAAQC,KAAK,CACXC,GAAIL,EAAKM,OAAS,EAClBjB,KAAMa,EACNxB,MAAM,IAERuB,EAAQE,MAUHH,EAAKO,KAAI,SAAC3B,EAAM4B,GAAP,OACR,cAAC,EAAD,CAAsB5B,KAAMA,GAAb4B,YCvBVC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de8a8fa4.chunk.js","sourcesContent":["import styled from 'styled-components'; \r\n\r\nexport const Container = styled.div`\r\n    background-color: #17181F;\r\n    color: #797A81;\r\n    min-height: 100vh;\r\n`;\r\n\r\nexport const Area = styled.div`\r\n    margin: auto;\r\n    max-width: 980px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Header = styled.h1`\r\n    margin: 0;\r\n    padding: 0;\r\n    color: #FFF;\r\n    text-align: center;\r\n    border-bottom: 1px solid #444;\r\n    padding-bottom: 20px;\r\n`;","import styled from 'styled-components';\r\n\r\ntype  ContainerProps = {\r\n    done: boolean;\r\n}\r\n\r\nexport const Container = styled.div(({ done }: ContainerProps)=>(\r\n    `\r\n    display: flex;\r\n    background-color: #20212C;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    margin-bottom: 10px;\r\n    align-itens: center;\r\n\r\n    input {\r\n        width: 25px;\r\n        height: 20px;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    label {\r\n        color: #CCC;\r\n        text-decoration: ${done ? 'line-through' : 'initial'};\r\n    }\r\n`\r\n));","import { useState } from 'react';\r\nimport * as C from './styles';\r\nimport { Item } from '../../types/item';\r\n\r\ntype Props = {\r\n    item: Item\r\n}\r\n\r\nexport const ListItem = ({ item }: Props) => {\r\n    const [isChecked, setIsChecked] = useState(item.done);\r\n\r\n    return (\r\n        <C.Container done={isChecked}>\r\n            <input \r\n            type=\"checkbox\" \r\n            checked={isChecked}\r\n            onChange={e => setIsChecked(e.target.checked)}\r\n             />\r\n            <label>{item.name}</label>\r\n        </C.Container>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    border: 1px solid #555;\r\n    border-radius: 15px;\r\n    padding: 10px;\r\n    margin: 20px 0;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .image {\r\n        margin-right: 5px;\r\n    }\r\n\r\n    input {\r\n        border: 0;\r\n        background: transparent;\r\n        outline: 0;\r\n        color: #FFF;\r\n        font-size: 18px;\r\n        flex: 1;\r\n    }\r\n`;","import { useState, KeyboardEvent } from 'react';\r\nimport * as C from './styles';\r\n\r\ntype Props = {\r\n    onEnter: (taskName: string) => void\r\n}\r\n\r\nexport const AddArea = ({ onEnter }: Props) => {\r\n    const [inputText, setInputText] = useState('');\r\n\r\n    const handleKeyUp = (e: KeyboardEvent) => {\r\n        if(e.code === 'Enter' && inputText !==  '') {\r\n            onEnter(inputText);\r\n            setInputText('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <C.Container>\r\n            <div className=\"image\">➕</div>\r\n            <input type=\"text\"\r\n            placeholder=\"Adicione uma tarefa\"\r\n            value={inputText}\r\n            onChange={e=>setInputText(e.target.value)}\r\n            onKeyUp={handleKeyUp}\r\n            />\r\n        </C.Container>\r\n    );\r\n}","import { useState } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/item';\nimport { ListItem } from './components/ListItem';\nimport { AddArea } from './components/AddArea';\n\n\nconst App = () => {\n  const [list, setList] = useState<Item[]>([\n   /*\n      perguntas aqui:\n\n   { id: 1, name: 'Estudar mais de 2hrs por dia.', done: false},\n    { id: 2, name: 'Comprar ração de Pandora.', done: false},\n\n    \n*/\n  ]);\n\n  const handleAddTask = (taskName: string) => {\n    let newList = [...list];\n    newList.push({\n      id: list.length + 1,\n      name: taskName,\n      done: false\n    });\n    setList(newList);\n  }\n\n  return (\n    <C.Container>\n      <C.Area>\n        <C.Header>Lista de Tarefas</C.Header>\n\n        <AddArea onEnter={handleAddTask} />\n\n        {list.map((item, index)=>(\n          <ListItem key={index} item={item} />\n        ))}\n\n\n      </C.Area>\n    </C.Container>\n  );\n}\n\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}